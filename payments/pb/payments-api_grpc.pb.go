// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentsGRPCServiceClient is the client API for PaymentsGRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentsGRPCServiceClient interface {
	// prepare - kick off a prepare, cement these transactions
	// in the qldb ledger as initialized
	Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareResponse, error)
	// authorize - a human, or authorized entity, can say, yes
	// we are okay to submit these transactions
	Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error)
	// submit - kick off the submission of the signing/submits
	Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error)
}

type paymentsGRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentsGRPCServiceClient(cc grpc.ClientConnInterface) PaymentsGRPCServiceClient {
	return &paymentsGRPCServiceClient{cc}
}

func (c *paymentsGRPCServiceClient) Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareResponse, error) {
	out := new(PrepareResponse)
	err := c.cc.Invoke(ctx, "/PaymentsGRPCService/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsGRPCServiceClient) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error) {
	out := new(AuthorizeResponse)
	err := c.cc.Invoke(ctx, "/PaymentsGRPCService/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsGRPCServiceClient) Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error) {
	out := new(SubmitResponse)
	err := c.cc.Invoke(ctx, "/PaymentsGRPCService/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentsGRPCServiceServer is the server API for PaymentsGRPCService service.
// All implementations must embed UnimplementedPaymentsGRPCServiceServer
// for forward compatibility
type PaymentsGRPCServiceServer interface {
	// prepare - kick off a prepare, cement these transactions
	// in the qldb ledger as initialized
	Prepare(context.Context, *PrepareRequest) (*PrepareResponse, error)
	// authorize - a human, or authorized entity, can say, yes
	// we are okay to submit these transactions
	Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error)
	// submit - kick off the submission of the signing/submits
	Submit(context.Context, *SubmitRequest) (*SubmitResponse, error)
	mustEmbedUnimplementedPaymentsGRPCServiceServer()
}

// UnimplementedPaymentsGRPCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentsGRPCServiceServer struct {
}

func (UnimplementedPaymentsGRPCServiceServer) Prepare(context.Context, *PrepareRequest) (*PrepareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedPaymentsGRPCServiceServer) Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedPaymentsGRPCServiceServer) Submit(context.Context, *SubmitRequest) (*SubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedPaymentsGRPCServiceServer) mustEmbedUnimplementedPaymentsGRPCServiceServer() {}

// UnsafePaymentsGRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentsGRPCServiceServer will
// result in compilation errors.
type UnsafePaymentsGRPCServiceServer interface {
	mustEmbedUnimplementedPaymentsGRPCServiceServer()
}

func RegisterPaymentsGRPCServiceServer(s grpc.ServiceRegistrar, srv PaymentsGRPCServiceServer) {
	s.RegisterService(&PaymentsGRPCService_ServiceDesc, srv)
}

func _PaymentsGRPCService_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsGRPCServiceServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentsGRPCService/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsGRPCServiceServer).Prepare(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsGRPCService_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsGRPCServiceServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentsGRPCService/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsGRPCServiceServer).Authorize(ctx, req.(*AuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsGRPCService_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsGRPCServiceServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentsGRPCService/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsGRPCServiceServer).Submit(ctx, req.(*SubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentsGRPCService_ServiceDesc is the grpc.ServiceDesc for PaymentsGRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentsGRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PaymentsGRPCService",
	HandlerType: (*PaymentsGRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _PaymentsGRPCService_Prepare_Handler,
		},
		{
			MethodName: "Authorize",
			Handler:    _PaymentsGRPCService_Authorize_Handler,
		},
		{
			MethodName: "Submit",
			Handler:    _PaymentsGRPCService_Submit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payments-api.proto",
}
