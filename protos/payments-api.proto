syntax = "proto3";

option go_package = "github.com/brave-intl/bat-go/payments/pb";

import "google/protobuf/any.proto";

// PaymentsGRPCService - the GRPC service defining payments
service PaymentsGRPCService {
    // prepare - kick off a prepare, cement these transactions
    // in the qldb ledger as initialized
    rpc Prepare (PrepareRequest) returns (PrepareResponse){}
    // authorize - a human, or authorized entity, can say, yes
    // we are okay to submit these transactions
    rpc Authorize (AuthorizeRequest) returns (AuthorizeResponse){}
    // submit - kick off the submission of the signing/submits
    rpc Submit (SubmitRequest) returns (SubmitResponse){}
}

// Status - the status of the request
enum Status {
    SUCCESS = 0;
    FAILURE = 1;
}

// State - the state of the "document"
enum State {
    // prepare started
    INITIALIZED = 0;
    // prepare completed (waiting for auth)
    PREPARED = 1;
    // authorized
    AUTHORIZED = 2;
    // being processed
    IN_PROGRESS = 3;
    // completed
    COMPLETED = 4;
}

// Custodian - enumeration of custodians
enum Custodian {
    UPHOLD = 0;
    GEMINI = 1;
    BITFLYER = 2;
    BRAVE = 3;
}

// ContextItem - a generic key value pair
message ContextItem {
    string Key = 1;
    google.protobuf.Any Value = 2;
}

// BatchMeta - metadata about the batch in question,
// for use in pagination for requests and responses
// protobuf is not suited for batches which will be more
// than a couple MB... Prepares should be chunked.
message BatchMeta {
    string batch_id = 1;
    int32 total_size = 2;
    int32 page_start_idx = 3;
    int32 page_end_idx = 4;
    int32 page_count = 5;
}

// Transactions - structure of a transaction
message Transaction {
    string idempotency_key = 1; // idempotency key, safe to retry
    string destination = 2; // card to send to for custodian
    string origin = 3; // card from which to send for custodian 
    string amount = 4; // str repr of decimal.Decimal
    string currency = 5; // BAT
    repeated ContextItem metadata = 6; // various futureproofing metadata
}

// PrepareRequest - this is the protobuf definition
// of the payments service prepare request type
message PrepareRequest {
    // custodian identifier (uphold/gemini/bitflyer/brave)
    Custodian custodian = 1;
    // batch size, batch count, batch id
    // the batch_id in the BatchMetadata indicates that this prepare request
    // is related to a particular batch (incase we have lots and lots of batch tx.
    // if this is the case it would be good to use batch size to indicate how many
    BatchMeta batch_meta = 2;
    // paged transaction list
    repeated Transaction batch_txs = 3;
}

// MetaResponse - this is the protobuf definition
// of the payments service meta response type
message MetaResponse {
    // Status - enumeration of the request's success/failure
    Status status = 1;
    string msg = 2;
    repeated ContextItem context = 3;
}

// Signature - presentation of signature
message Signature {
    bytes signature = 1;
    uint32 digest_alg = 2;
    bytes public_key = 3;
}

// PrepareResponse - this is the protobuf definition
// of the payments service prepare response type
message PrepareResponse {
    MetaResponse meta = 1;
    // batch identifier for this preparation
    string batch_id = 2;
    // the (s3 object) url that outlines the entire batch
    string auth_url = 3;
    // document references in qldb (one per tx)
    repeated string document_id = 4;
}

// AuthorizeRequest - this is the protobuf definition
// of the payments service submit request type
message AuthorizeRequest {
    string document_id = 1;
    string public_key = 2;
    string signature = 3;
}

// AuthorizeResponse - this is the protobuf definition
// of the payments service prepare response type
message AuthorizeResponse {
    MetaResponse meta = 1;
}

// SubmitRequest - this is the protobuf definition
// of the payments service submit request type
message SubmitRequest {
    BatchMeta batch_meta = 1;
    string document_id = 2;
}

// SubmitResponse - this is the protobuf definition
// of the payments service prepare response type
message SubmitResponse {
    MetaResponse meta = 1;
}
